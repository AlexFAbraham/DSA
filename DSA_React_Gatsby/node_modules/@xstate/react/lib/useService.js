"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useService = exports.fromService = void 0;
var react_1 = require("react");
var useActor_1 = require("./useActor");
function fromService(service) {
    if (process.env.NODE_ENV !== 'production' && !('machine' in service)) {
        throw new Error("Attempted to use an actor-like object instead of a service in the useService() hook. Please use the useActor() hook instead.");
    }
    var machine = service.machine;
    return {
        send: service.send.bind(service),
        subscribe: function (cb) { return service.subscribe(function (state) { return cb(state); }); },
        stop: service.stop,
        // TODO: remove compat lines in a new major, replace literal number with InterpreterStatus then as well
        current: ('status' in service ? service.status : service._status) !== 0
            ? service.state
            : machine.initialState,
        name: service.sessionId
    };
}
exports.fromService = fromService;
function useService(service) {
    var serviceActor = react_1.useMemo(function () { return fromService(service); }, [service]);
    var _a = __read(useActor_1.useActor(serviceActor, function (actor) { return actor.current; }), 1), state = _a[0];
    return [state, service.send];
}
exports.useService = useService;
