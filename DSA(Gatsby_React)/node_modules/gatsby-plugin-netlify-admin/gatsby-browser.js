"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.onInitialClientRender = void 0;

var _interopRequireWildcard2 = _interopRequireDefault(require("@babel/runtime/helpers/interopRequireWildcard"));

var _react = _interopRequireDefault(require("react"));

var _privateRoute = _interopRequireDefault(require("./components/privateRoute"));

var _LoginWrapper = _interopRequireDefault(require("./components/LoginWrapper"));

/* global __PATH_PREFIX__ */
// Reference from https://github.com/gatsbyjs/gatsby/blob/ff911e2300/packages/gatsby-plugin-netlify-cms/src/gatsby-browser.js
var routes = /(confirmation|invite|recovery|email_change)_token=([^&]+)/;
var errorRoute = /error=access_denied&error_description=403/;
var accessTokenRoute = /access_token=/;

var onInitialClientRender = function onInitialClientRender(_, pluginOptions) {
  var adminUri = pluginOptions.adminUri;
  var enableIdentityWidget = true;
  var hash = (document.location.hash || '').replace(/^#\/?/, '');

  if (enableIdentityWidget && (routes.test(hash) || errorRoute.test(hash) || accessTokenRoute.test(hash))) {
    Promise.resolve().then(function () {
      return (0, _interopRequireWildcard2.default)(require('netlify-identity-widget'));
    }).then(function (_ref) {
      var netlifyIdentityWidget = _ref.default;
      netlifyIdentityWidget.on('init', function (user) {
        if (!user) {
          netlifyIdentityWidget.on('login', function () {
            document.location.href = __PATH_PREFIX__ + "/" + adminUri + "/";
          });
        }
      });
      netlifyIdentityWidget.init();
    });
  }
};

exports.onInitialClientRender = onInitialClientRender;

exports.wrapPageElement = function (_ref2, pluginOptions) {
  var element = _ref2.element,
      props = _ref2.props;
  var loginUri = pluginOptions.loginUri;
  var netlifyAdminPlugin = props.pageContext.netlifyAdminPlugin;

  if (netlifyAdminPlugin) {
    if (netlifyAdminPlugin.shouldExclude) {
      return /*#__PURE__*/_react.default.createElement(_LoginWrapper.default, {
        element: element
      });
    }

    return (0, _privateRoute.default)({
      component: /*#__PURE__*/_react.default.createElement(_LoginWrapper.default, {
        element: element
      }),
      path: props.uri,
      loginUri: loginUri
    });
  }

  return element;
};