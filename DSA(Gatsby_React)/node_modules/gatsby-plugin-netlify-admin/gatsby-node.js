"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var path = require('path');

var globCB = require('glob');

var Promise = require('bluebird');

var _require = require('gatsby-page-utils'),
    createPath = _require.createPath,
    validatePath = _require.validatePath,
    ignorePath = _require.ignorePath;

var _require2 = require('./utils/config'),
    defaultAdminUri = _require2.defaultAdminUri;

var glob = Promise.promisify(globCB);

var createPathWithAdminURI = function createPathWithAdminURI(adminUri, filePath) {
  return path.posix.join('/', adminUri, createPath(filePath));
};

var isIndexPage = function isIndexPage(adminUri, pagePath) {
  return pagePath === "/" + adminUri + "/";
};

exports.onPreInit = function (_ref, options) {
  var reporter = _ref.reporter;

  if (!options.adminPath) {
    reporter.panic('"adminPath" is required.');
  }

  if (!options.adminUri) {
    options.adminUri = defaultAdminUri;
    reporter.warn("\"adminUri\" is undefined. Use " + defaultAdminUri + " as default admin URI");
  }

  if (!options.loginUri) {
    options.loginUri = createPathWithAdminURI(options.adminUri, '/');
    reporter.warn("\"loginUri\" is undefined. Will fallback to root adminUri as the default login path: " + options.loginUri);
  }

  if (!options.excludeUri) {
    options.excludeUri = [];
  }

  options.excludeUri.push(options.loginUri);
};

exports.onCreateWebpackConfig = function (_ref2) {
  var stage = _ref2.stage,
      loaders = _ref2.loaders,
      actions = _ref2.actions;

  if (stage === 'build-html') {
    actions.setWebpackConfig({
      module: {
        rules: [{
          test: /netlify-identity-widget/,
          use: loaders.null()
        }]
      }
    });
  }
};

exports.createPagesStatefully = /*#__PURE__*/function () {
  var _ref4 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(_ref3, pluginOptions, doneCb) {
    var actions, store, adminUri, adminPath, ignore, excludeUri, createPage, _store$getState, program, exts, adminDir, pagesGlob, files;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            actions = _ref3.actions, store = _ref3.store;
            adminUri = pluginOptions.adminUri, adminPath = pluginOptions.adminPath, ignore = pluginOptions.ignore, excludeUri = pluginOptions.excludeUri;
            createPage = actions.createPage;
            _store$getState = store.getState(), program = _store$getState.program;
            exts = program.extensions.map(function (ext) {
              return "" + ext.slice(1);
            }).join(',');
            adminDir = path.resolve(process.cwd(), adminPath);
            pagesGlob = "**/*.{" + exts + "}";
            _context.next = 9;
            return glob(pagesGlob, {
              cwd: adminPath
            });

          case 9:
            files = _context.sent;
            files.forEach(function (filePath) {
              if (!validatePath(filePath)) {
                return;
              } // Filter out anything matching the given ignore patterns and options


              if (ignorePath(filePath, ignore)) {
                return;
              }

              var pagePath = createPathWithAdminURI(adminUri, filePath);
              createPage({
                path: pagePath,
                component: path.join(adminDir, filePath),
                matchPath: isIndexPage(adminUri, pagePath) ? pagePath + "*" : '',
                context: {
                  netlifyAdminPlugin: {
                    shouldExclude: excludeUri.includes(pagePath)
                  }
                }
              });
            });
            doneCb();

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x, _x2, _x3) {
    return _ref4.apply(this, arguments);
  };
}();